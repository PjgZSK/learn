# example
snippet sign "Signature"
Yours sincerely,

Gilles Castel
endsnippet

snippet today "Date"
`!p
import time
from datetime import date
snip.rv = date.today()
`
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

# code scope
snippet cs "Code Scope" w
\`\`\`
${1:${VISUAL}}
\`\`\`
endsnippet

# LaTex
# inline and display mode
snippet dm "Display mode" w
$$
${1:${VISUAL}}
$$$0
endsnippet

snippet mk "inline mode" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# sqrt
snippet 'sq([1-9a-zA-Z]*)' "sqrt" wr
\sqrt`!p snip.rv = '[' + match.group(1) + ']' if match.group(1) != '' else ''`{$1}$0
endsnippet

# fraction
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while i > 0:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# matrix
global !p
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

    # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder} "
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f" ${placeholder} "
			placeholder += 1
		res += end
	return res[:-1]
endglobal

post_jump "create_matrix_placeholders(snip)"
snippet '(\\?)([vVbBps]?)mat(?P<row>\d+)(,(?P<col>\d+))?' "LaTex matrix" wr
`!p
c = match.group(2)
prefix = ""
postfix = ""
if c == "s":
	c = "small"
	prefix = "\\bigl( "
	postfix = " \\bigr)"
start = "\\begin{" + c + "matrix}"
end = "\\end{" + c + "matrix}"
dm = "$$" if match.group(1) == "\\" else ""
snip.rv = dm + prefix + start + "\n" + \
	create_matrix(match.group('col') if match.group('col') else 0, match.group('row'), "&", "\t", "\\\\\\\\\n") + \
	"\n" + end + postfix + dm
`$0
endsnippet

# smart mk
global !p
def create_smart_mk_snip(arg)
	snip = ''
	if arg == 'co':
		snip = '{\color{${1:Salmon}}$2}$0'
	elif arg == 'cos':
		snip = ''
	return snip
endglobal
#post_jump "create_matrix_placeholders(snip)"
snippet 'mk(co|cos|cofg|cosg)' "Smart mk" wr
`!p
snip.rv = '$' + match.group(1) + '$'
`
endsnippet

# color
snippet co "color" w
{\color{${1:Salmon}}$2}$0
endsnippet

snippet cos "salmon color" w
{\color{Salmon}$1}$0
endsnippet

snippet cofg "forest green color" w
{\color{ForestGreen}$1}$0
endsnippet

snippet cosg "sea green color" w
{\color{SeaGreen}$1}$0
endsnippet

# over 
snippet '(mk)?v([a-zA-Z])' "Vec" wr
`!p 
inline = '$' if match.group(1) else ''
snip.rv = inline`\vec `!p snip.rv = match.group(2) + inline`
endsnippet

snippet 'h([a-zA-Z])' "Hat" wr
\hat `!p snip.rv = match.group(1)`
endsnippet

snippet 'b([a-zA-Z])' "Bar" wr
\bar `!p snip.rv = match.group(1)`
endsnippet

# For Learn
# For Snippets Aliases
# global !p
# import px.snippets
# endglobal
# 
# snippet pr "print debug" bw
# `!p
# prefix = t[1] + ": %q\\n' "
# prefix = "{}:{}: {}".format(
#     os.path.basename(px.buffer.get().name),
#     str(px.cursor.get()[0]),
#     prefix
# )
# `printf 'XXXXXX `!p snip.rv=prefix`$1 >&2
# endsnippet
# 
# post_jump "px.snippets.expand(snip)"
# snippet pd "Description" b
# pr$1 >${2:/tmp/debug}
# endsnippet
# 
# # For Dynamic Tabstops/Tabstop Generation
# global !p
# def create_row_placeholders(snip):
#     # retrieving single line from current string and treat it like tabstops
#     # count
#     placeholders_amount = int(snip.buffer[snip.line].strip())
# 
#     # erase current line
#     snip.buffer[snip.line] = ''
# 
#     # create anonymous snippet with expected content and number of tabstops
#     anon_snippet_body = ' & '.join(['$' + str(i+1)
#                                     for i in range(placeholders_amount)])
# 
#     # expand anonymous snippet
#     snip.expand_anon(anon_snippet_body)
# endglobal
# 
# post_jump "create_row_placeholders(snip)"
# snippet "tr(\d+)" "latex table row variable" br
# `!p snip.rv = match.group(1)`
# endsnippet
# 
# post_jump "create_matrix_placeholders(snip)"
# snippet 'arr(\d+),(\d+)' "LaTeX array" br
# \begin{array}{`!p
# orient = ""
# for _ in range(0, int(match.group(1))): orient += "l"
# snip.rv = orient`}
# `!p
# snip.rv = create_matrix(match.group(1), match.group(2), "&", "\t", "\\\\\\\\\n")
# `$0
# \end{array}
# endsnippet
