C# is a strongly typed language.

Strongly typed language
    Every variable and constant has a type, as does expression that evaluates to a value.

The information stored in a type can include the following items:
    The stored space that a variable of the type requires.
    The minimum and maximum values that it can represent.
    The members(methods, properties, fields, event and attributes) that it contains.
    The base class that it inherits from.
    The interfaces that it implements.
    The kinds of operations that are permitted.

Type safe
    The compiler uses type information to make sure all operations that are performed in your code 
        are type safe. 

Metadata
    The compiler embeds the type information into the executable file as metadata.


Built-in types
    C# provides a standard set of built-in types. They represent integers, 
        floating point values, Boolean expressions, text characters, decimal
        values, and other types of data.
    There are also string and object types.

Custom types
    You use the struct, class, enum, interface and record constructs to create your own custom types.
    The .NET class library itself is a collection of custom types that you can use in your own applications.

The common type system
    It is important to understand two fundamental points about type system:
        It supports the principle of inheritance.
            All types, including built-in numeric type such as System.Int32(C# keyword int), derived
            from a single base type, which is System.Object(C# keyword object).
            This unified type hierarchy is called the Common Type System(CTS).
        Each type in CTS is defined as either a value type or a reference type.
            Types that you defined by using struct keyword are value types. All built-in numeric types are 
                structs.
            Types that you defined by using class or record keyword are reference types.
            Value types and reference types have different compile-time rule, and different
                run-time behavior. 
    
    Classes and structs are two of base constructs of CTS. Each is essentially a data structure
        that encapsulates a set of data and behaviors that belong together as a logic unit.
    
    A Class is a reference type. When an object of the type is created, the variable to which 
        the object assigned holds only a reference to that memory. When the object reference
        is assigned to a new variable, the new variable refer to the original object. Change
        made through one variable is reflected in the other variable because they both refer 
        to the same data. 
    A struct is a value type. When a struct is created, the variable to which the struct is
        assigned holds its actual data. When the object is assigned to a new variable, it's
        copied. Change made through one copy don't affect the other copy. 
    In general, classes are used to model more complex behavior.
    Classes typically store data that is intended to be modified after a class object is created.
    Structs are best suited for small data structures.
    Structs typically store data that isn't intended to be modified after the struct obejct is created.

    Value types
        Value types derived from System.ValueType, which derived from System.Object.
        The memory for a struct is allocated inline in whatever context the variable is declared.
            There is no seperate heap allocation or garbage collection overhead for 
            value-type variable.
        There are two categories of value types: struct and enum.
        The built-in numeric types are struct, and they have fields and methods that you can
            access. But you declare and assign value to them as if they are
            simple non-aggregate types.
        Value types are sealed. 
            You can't derive a type from value types.
            A struct can only inherit from System.ValueType.
        Boxing and unboxing
            Boxing: value types is casted into System.Object or interface type.
            Unboxing: System.Object or interface type is casted into value types.
            Boxing and unboxing is computatianlly expensive.
        An enum type defines a set of named integral constants.
        All enums inherit from System.Enum, which inherits from System.ValueType.

    Reference types
        A type that is defined as a class, record, delegate, array or interface is a reference type.
        When the object is created(using the new operator), the memory is allocated on the managed heap. 
            The variable only holds a reference to the location of the object.
        Types on the managed heap require overhead both when they're allocated and
            when they're reclaimed.
        Garbage collection is the automatic memory management functionality of CLR, which performs
            the reclaimation.
        Reference types fully support inheritance.
            Any classes that is created by you can inherit from any other class or interface that is not 
                defined as sealed.
            Other classed can inherit from your class and override your virtual methods.
    
    Type of literal values
       In C#, literal values receive a type from compiler. 

    Generic types
        A type can be declared with one or more type parameters that serve as a placeholder
            for the actual type(the concrete type). 
    
    Implicit types 
        You can impicitly type a local variable (but not class members) by using ver keyword.
        The variable still receive a type at compile time, but the type is provided by compiler.
    
    Anonymous types

    Nullable value types
        Ordinary value types can't have a value of null. However, you can create a nullable
            value type by appending a ? after the type. For example, int? is an int type
            that can also have the value null.
        Nullable value types are instances of the generic struct type System.Nullable<T>.
        
    Compile-time type and run-time type
        A variable can have different compile-time type and run-time type.
        The compile-time type is the declared or inferred type of the variable in the source code.
        The run-time type is the type of the instance referred by that variable.

        If two types for a variable, it's important to understand when the compile-time type
            and run-time type apply.
        The compile-time type determines all the actions taken by the compiler. These
            compiler actions include method call resolution, overload resolution and 
            avaliable implicit and explicit casts. 
        The run-time type determines all actions that are resolved at run time. These 
            run-time actions include dispatching virtual method calls, evaluating 
            is and switch expressions, and other type testing APIs.
          
